{"version":3,"file":"static/js/615.f95ca135.chunk.js","mappings":"wPAEMA,EAAe,SAAAC,GACnB,IAAMC,EAASC,KAAKC,MAAMH,EAASI,EAAAA,GAAAA,QAC7BC,EAAOL,EAASI,EAAAA,GAAAA,OACtB,MAAM,GAAN,OAAUA,EAAAA,GAAMC,IAAhB,OAAwBJ,IAGpBK,EAAa,SAAAC,GACjB,OAA2BA,GAAO,IAAIC,MAAM,oBAAsB,GAAlE,eAAUH,GAAV,WAAgBJ,EAAhB,KACA,OAAQI,GAASJ,EAEbQ,SAASR,GAAUG,EAAAA,GAAAA,OACjBA,EAAAA,GAAAA,WAAgB,SAAAM,GAAC,OAAIA,IAAML,EAAKM,iBAFlC,MAMAC,EAAW,SAAAC,GAAW,OAC1BA,EAAY,IAAMC,EAAAA,IAClBD,EAAY,IAAMC,EAAAA,GAAcC,EAAAA,IAChCF,EAAY,GAAK,GAGbG,EAAY,SAAAH,GAAW,OAC1BA,EAAY,IAAMI,EAAAA,IACjBJ,EAAY,IAAMI,EAAAA,GAAeF,EAAAA,IAClCF,EAAY,IAAMC,EAAAA,IACjBD,EAAY,IAAMC,EAAAA,GAAcC,EAAAA,IACb,IAAnBF,EAAY,K,oGCtBVK,EAAQ,CACZC,WAAY,WACZC,OAAQ,sBACRC,WAAY,eACZC,UAAW,UAqEb,UAlE0B,SAAAC,GACxB,IAAQC,EAAkBC,EAAAA,WAAiBC,EAAAA,GAAnCF,cACR,EAA0BC,EAAAA,SAAe,IAAzC,eAAOE,EAAP,KAAcC,EAAd,KAOMC,GALMJ,EAAAA,OAAa,CACvBK,MAAO,KACPC,cAAe,IAGEN,EAAAA,aACjB,YAAe,IAAZO,EAAW,EAAXA,KACD,GACEA,EAAK,KAAOC,EAAAA,GAAAA,eACZD,EAAK,KAAOC,EAAAA,GAAAA,MAFd,CAUA,IAJA,IAAMC,EAAMC,MAAMC,KAAKJ,GAEnBK,EAAc,EAChBC,EAAiB,GACZD,EAAc,GAAG,CACtB,IAAME,EAAML,EAAIM,MAAM,EAAGH,GAAaI,KAAK,KACrCC,EAAOC,EAAAA,GAAiBJ,GAC9B,GAAIG,EAAM,CACRJ,EACEI,EAAKE,QAAQ,SAAW,EAAxB,UACOF,EADP,aACe3C,EAAAA,EAAAA,IAAamC,EAAI,IADhC,qBACgDA,EAAI,IAChC,IAAhBG,EAAA,UACGK,EADH,kBACiBR,EAAI,IADrB,UAEGQ,EAFH,YAEWR,EAAIM,MAAMH,GAAaI,KAAK,MAC7C,MAGFJ,IAGF,IAAMQ,EAAI,UAAMX,EAAI,GAAV,YAAgBA,EAAI,GAApB,YAA0BA,EAAI,GAA9B,cAAsCI,GAChDV,GAAS,SAAAkB,GAAY,OACnBA,EAAaN,MAAMM,EAAaC,OAAS,KAAKC,OAAOH,SAGzD,CAACjB,KAYH,OATAH,EAAAA,WAAgB,WAId,OAHID,GAAiBA,EAAcyB,QAAUC,EAAAA,GAAAA,YAC3C1B,EAAc2B,cAAgBtB,GAEzB,WACDL,IAAeA,EAAc2B,cAAgB,SAElD,CAAC3B,KAGF,SAAC,IAAD,CAAM4B,UAAU,EAAOlC,MAAOA,EAA9B,SACGS,EAAM0B,KAAI,SAAAC,GAAI,OACb,gCACGA,GACD","sources":["lib/utils.js","routes/Tools/MidiMessageViewer/index.js"],"sourcesContent":["import { noteOnStart, noteOffStart, numOfChannels, notes } from './constants';\r\n\r\nconst noteToString = number => {\r\n  const octave = Math.floor(number / notes.length);\r\n  const note = number % notes.length;\r\n  return `${notes[note]}${octave}`;\r\n};\r\n\r\nconst noteToMidi = str => {\r\n  const [_, note, octave] = (str || '').match(/(.{1,2})(\\d{1})/) || [];\r\n  return !note || !octave\r\n    ? null\r\n    : parseInt(octave) * notes.length +\r\n        notes.findIndex(n => n === note.toUpperCase());\r\n};\r\n\r\n// check for noteOn number\r\nconst isNoteOn = midiMessage =>\r\n  midiMessage[0] >= noteOnStart &&\r\n  midiMessage[0] <= noteOnStart + numOfChannels &&\r\n  midiMessage[2] > 0;\r\n\r\n// either noteOff number or noteOn and velocity is 0\r\nconst isNoteOff = midiMessage =>\r\n  (midiMessage[0] >= noteOffStart &&\r\n    midiMessage[0] <= noteOffStart + numOfChannels) ||\r\n  (midiMessage[0] >= noteOnStart &&\r\n    midiMessage[0] <= noteOnStart + numOfChannels &&\r\n    midiMessage[2] === 0);\r\n\r\nexport { isNoteOn, isNoteOff, noteToMidi, noteToString };\r\n","import React from 'react';\r\nimport { Card } from 'antd';\r\nimport MidiContext from 'components/Midi/Context';\r\nimport { MidiMessageCodes, MidiMessages, MidiPortState } from 'lib/enums';\r\nimport { noteToString } from 'lib/utils';\r\n\r\nconst style = {\r\n  fontFamily: 'Consolas',\r\n  height: 'calc(100vh - 108px)',\r\n  textShadow: '1px 1px #222',\r\n  overflowY: 'scroll',\r\n};\r\n\r\nconst MidiMessageViewer = props => {\r\n  const { selectedInput } = React.useContext(MidiContext);\r\n  const [lines, setLines] = React.useState([]);\r\n\r\n  const ref = React.useRef({\r\n    start: null,\r\n    numOfMessages: 0,\r\n  });\r\n\r\n  const appendLine = React.useCallback(\r\n    ({ data }) => {\r\n      if (\r\n        data[0] === MidiMessages.ActiveSensing ||\r\n        data[0] === MidiMessages.Clock\r\n      )\r\n        return;\r\n\r\n      const arr = Array.from(data);\r\n\r\n      let sliceLength = 3,\r\n        additionalText = '';\r\n      while (sliceLength > 0) {\r\n        const key = arr.slice(0, sliceLength).join('_');\r\n        const type = MidiMessageCodes[key];\r\n        if (type) {\r\n          additionalText =\r\n            type.indexOf('Note') >= 0\r\n              ? `${type} ${noteToString(arr[1])} Velocity ${arr[2]}`\r\n              : sliceLength === 2\r\n              ? `${type} Value ${arr[2]}`\r\n              : `${type} ${arr.slice(sliceLength).join(' ')}`;\r\n          break;\r\n        }\r\n\r\n        sliceLength--;\r\n      }\r\n\r\n      const text = `${arr[0]} ${arr[1]} ${arr[2]} - ${additionalText}`;\r\n      setLines(currentLines =>\r\n        currentLines.slice(currentLines.length - 100).concat(text)\r\n      );\r\n    },\r\n    [setLines]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (selectedInput && selectedInput.state === MidiPortState.Connected)\r\n      selectedInput.onmidimessage = appendLine;\r\n\r\n    return () => {\r\n      if (selectedInput) selectedInput.onmidimessage = null;\r\n    };\r\n  }, [selectedInput]);\r\n\r\n  return (\r\n    <Card bordered={false} style={style}>\r\n      {lines.map(line => (\r\n        <>\r\n          {line}\r\n          <br />\r\n        </>\r\n      ))}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MidiMessageViewer;\r\n"],"names":["noteToString","number","octave","Math","floor","notes","note","noteToMidi","str","match","parseInt","n","toUpperCase","isNoteOn","midiMessage","noteOnStart","numOfChannels","isNoteOff","noteOffStart","style","fontFamily","height","textShadow","overflowY","props","selectedInput","React","MidiContext","lines","setLines","appendLine","start","numOfMessages","data","MidiMessages","arr","Array","from","sliceLength","additionalText","key","slice","join","type","MidiMessageCodes","indexOf","text","currentLines","length","concat","state","MidiPortState","onmidimessage","bordered","map","line"],"sourceRoot":""}