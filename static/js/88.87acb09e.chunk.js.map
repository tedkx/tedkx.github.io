{"version":3,"file":"static/js/88.87acb09e.chunk.js","mappings":"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","sources":["lib/utils.js","routes/MidiSequencer/constants.js","components/KeyboardComponents/Button.js","components/KeyboardComponents/Pad.js","components/KeyboardComponents/RotaryKnob.js","routes/MidiSequencer/ParameterKnob.js","routes/MidiSequencer/utils.js","../node_modules/@ant-design/icons-svg/es/asn/StepBackwardOutlined.js","../node_modules/@ant-design/icons/es/icons/StepBackwardOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/CaretRightOutlined.js","../node_modules/@ant-design/icons/es/icons/CaretRightOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/PauseOutlined.js","../node_modules/@ant-design/icons/es/icons/PauseOutlined.js","routes/MidiSequencer/StepSequencer.js","routes/MidiSequencer/index.js"],"sourcesContent":["import { noteOnStart, noteOffStart, numOfChannels, notes } from './constants';\r\n\r\nconst noteToString = number => {\r\n  const octave = Math.floor(number / notes.length);\r\n  const note = number % notes.length;\r\n  return `${notes[note]}${octave}`;\r\n};\r\n\r\nconst noteToMidi = str => {\r\n  const [_, note, octave] = (str || '').match(/(.{1,2})(\\d{1})/) || [];\r\n  return !note || !octave\r\n    ? null\r\n    : parseInt(octave) * notes.length +\r\n        notes.findIndex(n => n === note.toUpperCase());\r\n};\r\n\r\n// check for noteOn number\r\nconst isNoteOn = midiMessage =>\r\n  midiMessage[0] >= noteOnStart &&\r\n  midiMessage[0] <= noteOnStart + numOfChannels &&\r\n  midiMessage[2] > 0;\r\n\r\n// either noteOff number or noteOn and velocity is 0\r\nconst isNoteOff = midiMessage =>\r\n  (midiMessage[0] >= noteOffStart &&\r\n    midiMessage[0] <= noteOffStart + numOfChannels) ||\r\n  (midiMessage[0] >= noteOnStart &&\r\n    midiMessage[0] <= noteOnStart + numOfChannels &&\r\n    midiMessage[2] === 0);\r\n\r\nexport { isNoteOn, isNoteOff, noteToMidi, noteToString };\r\n","import { noteToMidi } from 'lib/utils';\r\n\r\nconst createParameter = (min, max, defaultValue, title, centerBased) => ({\r\n  centerBased: centerBased === true,\r\n  defaultValue,\r\n  max,\r\n  min,\r\n  title,\r\n});\r\n\r\nconst tunez = {\r\n  //lazerhawk's lawless\r\n  lawless: {\r\n    bpm: 90,\r\n    noteDuration: 30,\r\n    notes:\r\n      'C4 G4 C5 D#5 D5 C5 D5 D#5 G5 D#5 D5 C5 G4 F4 D#4 D4 C6 C6 C6 C5 C5 C5 C6 C6 C6 G5 D#5 D5 C5 G4 D#4 D4',\r\n    noteValue: 16,\r\n  },\r\n\r\n  // tigran hanasyan's the grid intro\r\n  theGrid: {\r\n    bpm: 138,\r\n    noteDuration: 100,\r\n    notes:\r\n      'G3 D4 G4 C5 D5 D#4 G4 A#4 D#5 F5 B3 G4 G#4 D5 D#5 F5 G5 G3 D4 G4 C5 D5 F4 G4 A#4 D#5 F5 C4 G4 G#4 D5 D#5',\r\n    noteValue: 16,\r\n  },\r\n};\r\n\r\nconst formatPattern = pattern => ({\r\n  ...pattern,\r\n  notes: pattern.notes.split(' ').map(noteToMidi),\r\n});\r\n\r\nconst defaultPattern = formatPattern(tunez.theGrid);\r\n\r\nconst sequencerParameterData = {\r\n  noteDuration: createParameter(\r\n    1,\r\n    300,\r\n    defaultPattern.noteDuration,\r\n    'Note Duration'\r\n  ),\r\n  transpose: createParameter(-24, 24, 0, 'Transpose', true),\r\n};\r\n\r\nconst globalParameterData = {\r\n  bpm: createParameter(40, 280, defaultPattern.bpm, 'Tempo'),\r\n  noteValue: createParameter(1, 32, defaultPattern.noteValue, 'NoteValue'),\r\n};\r\n\r\nexport { defaultPattern, globalParameterData, sequencerParameterData };\r\n","import React from 'react';\r\n\r\nconst Button = ({ children, className, index, onClick, ...props }) => {\r\n  return (\r\n    <div\r\n      className={`keyboard-button ${className}`}\r\n      onClick={onClick}\r\n      {...props}\r\n    >\r\n      <div className=\"button-overlay\"></div>\r\n      <div className=\"button-inner\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\nconst Pad = ({\r\n  active,\r\n  children,\r\n  className,\r\n  index,\r\n  on,\r\n  onClick,\r\n  onWheel,\r\n  ...props\r\n}) => {\r\n  const handleClick = React.useCallback(\r\n    e => {\r\n      if (onClick) onClick(index, on, e);\r\n    },\r\n    [index, on, onClick]\r\n  );\r\n\r\n  const handleWheel = React.useCallback(\r\n    e => {\r\n      if (onWheel) onWheel(index, e.deltaY < 0 ? 'up' : 'down', e);\r\n    },\r\n    [index, onWheel]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={`keyboard-pad ${className} ${active && 'active'} ${\r\n        on && 'on'\r\n      }`}\r\n      onClick={handleClick}\r\n      onWheel={handleWheel}\r\n      {...props}\r\n    >\r\n      <div className=\"pad-overlay\"></div>\r\n      <div className=\"pad-inner\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pad;\r\n","import React from 'react';\r\nimport { debounce } from 'lodash';\r\n\r\nconst minAngle = -144;\r\nconst maxAngle = 144;\r\nconst tickAngleDiff = 12;\r\n\r\nconst angleScale = maxAngle - minAngle;\r\nconst numOfTicks = angleScale / tickAngleDiff;\r\nconst defaultStep = 1;\r\n\r\nconst convertToKnobAngle = (value, min, max) => {\r\n  const knobValue = ((value - min) * angleScale) / (max - min) + minAngle;\r\n  return Math.max(minAngle, Math.min(maxAngle, knobValue));\r\n};\r\n\r\nconst getTickProps = (tickIndex, angle, centerBased) => {\r\n  const tickAngle = minAngle + tickAngleDiff * tickIndex;\r\n  const active = !centerBased\r\n    ? angle > minAngle && tickAngle <= angle\r\n    : angle < 0\r\n    ? tickAngle <= 0 && tickAngle >= angle\r\n    : tickAngle >= 0 && tickAngle <= angle;\r\n\r\n  return {\r\n    className: `tick ${active && 'active'}`,\r\n    key: tickIndex,\r\n    style: {\r\n      transform: `rotate(${tickAngle}deg)`,\r\n    },\r\n  };\r\n};\r\n\r\nconst RotaryKnob = ({\r\n  centerBased,\r\n  className,\r\n  displayValue,\r\n  max,\r\n  min,\r\n  onSetValue,\r\n  step = defaultStep,\r\n  style,\r\n  title,\r\n  value,\r\n}) => {\r\n  const ref = React.useRef({\r\n    factor: 1,\r\n  });\r\n\r\n  const resetFactor = React.useMemo(\r\n    () =>\r\n      debounce(() => {\r\n        ref.current.factor = step;\r\n      }, 25),\r\n    [step]\r\n  );\r\n\r\n  const angle = React.useMemo(\r\n    () => convertToKnobAngle(value, min, max, centerBased),\r\n    [value, min, max]\r\n  );\r\n\r\n  const onWheel = React.useCallback(\r\n    e => {\r\n      const newValue =\r\n        value + step * ref.current.factor * (e.deltaY < 0 ? 1 : -1);\r\n      onSetValue(Math.min(max, Math.max(min, newValue)));\r\n      ref.current.factor += step;\r\n      resetFactor();\r\n    },\r\n    [value, step, min, max]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={`rotary-knob ${displayValue && 'with-value'} ${\r\n        title && 'with-title'\r\n      } ${className}`}\r\n      style={style}\r\n    >\r\n      {title && <div className=\"title\">{title}</div>}\r\n      <div className=\"knob-overlay\" onWheel={onWheel}></div>\r\n      <div className=\"knob-inner\">\r\n        <div\r\n          className=\"marker\"\r\n          style={{ transform: `rotate(${angle}deg)` }}\r\n        ></div>\r\n        <div className=\"ticks\">\r\n          {Array.from(Array(numOfTicks + 1)).map((_, idx) => (\r\n            <div key={idx} {...getTickProps(idx, angle, centerBased)}></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      {displayValue && (\r\n        <div className=\"value-wrap\">\r\n          <div className=\"value-display\">{value}</div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RotaryKnob;\r\n","import React from 'react';\r\nimport { RotaryKnob } from 'components/KeyboardComponents';\r\n\r\nconst ParameterKnob = ({ name, onSetParameter, ...props }) => {\r\n  const handleValueChange = React.useCallback(\r\n    value => onSetParameter(name, value),\r\n    [name, onSetParameter]\r\n  );\r\n\r\n  return (\r\n    <div className=\"parameter-knob\">\r\n      <RotaryKnob displayValue onSetValue={handleValueChange} {...props} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ParameterKnob;\r\n","import React from 'react';\r\nimport MidiContext from 'components/Midi/Context';\r\nimport { MidiMessages } from 'lib/enums';\r\n\r\nconst getIntervalMillis = (bpm, noteValue) => ((60000 / bpm) * 4) / noteValue;\r\n\r\nconst stepSequencerDataToSteps = stepSequencersData => {\r\n  if (!Array.isArray(stepSequencersData)) return [];\r\n\r\n  let stepsLength = stepSequencersData[0].notes.length;\r\n  for (let i = 0; i < stepSequencersData.length; i++)\r\n    if (stepSequencersData[i].length > stepsLength)\r\n      stepsLength = stepSequencersData[i].length;\r\n\r\n  return Array.from(Array(stepsLength)).map((_, idx) =>\r\n    stepSequencersData.map(\r\n      ({ channels, notes, noteDuration, transpose, velocity }) => ({\r\n        channels,\r\n        duration: noteDuration,\r\n        note: notes[idx].note + transpose,\r\n        on: notes[idx].on,\r\n        velocity,\r\n      })\r\n    )\r\n  );\r\n};\r\n\r\nconst usePadEvents = setPadData => {\r\n  const onClick = React.useCallback(\r\n    padIndex =>\r\n      setPadData(({ notes, ...pd }) =>\r\n        pd.map((item, idx) =>\r\n          idx === padIndex ? { ...item, on: !item.on } : item\r\n        )\r\n      ),\r\n    [setPadData]\r\n  );\r\n\r\n  const onWheel = React.useCallback(\r\n    (padIndex, direction) =>\r\n      setPadData(({ notes, ...pd }) => ({\r\n        ...pd,\r\n        notes: notes.map((item, idx) =>\r\n          idx === padIndex\r\n            ? {\r\n                ...item,\r\n                note: direction === 'up' ? item.note + 1 : item.note - 1,\r\n              }\r\n            : item\r\n        ),\r\n      })),\r\n    [setPadData]\r\n  );\r\n\r\n  return {\r\n    onClick,\r\n    onWheel,\r\n  };\r\n};\r\n\r\nconst useNotesPlaying = (\r\n  { bpm, noteValue, ...parameters },\r\n  stepSequencersData,\r\n  autostart\r\n) => {\r\n  const midiContext = React.useContext(MidiContext);\r\n  const { selectedOutput } = midiContext;\r\n\r\n  const [activeNoteIdx, setActiveNoteIdx] = React.useState(null);\r\n\r\n  // keep almmost every param in ref so that they can be pick by interval callback playNote\r\n  const ref = React.useRef({\r\n    ...parameters,\r\n    intervalId: null,\r\n    intervalMillis: getIntervalMillis(bpm, noteValue),\r\n    noteIdx: 0,\r\n    steps: stepSequencerDataToSteps(stepSequencersData),\r\n    tempoChangeRequested: null,\r\n  });\r\n\r\n  // if interval active, store new bpm to tempoChangeRequested\r\n  // it will be reset by the next playNote tick\r\n  React.useEffect(() => {\r\n    if (ref.current.intervalId !== null)\r\n      ref.current.tempoChangeRequested = getIntervalMillis(bpm, noteValue);\r\n    else ref.current.intervalMillis = getIntervalMillis(bpm, noteValue);\r\n  }, [bpm, noteValue]);\r\n\r\n  // update ref with the latest parameter values as they change\r\n  React.useEffect(() => {\r\n    Object.keys(parameters).forEach(key => {\r\n      ref.current[key] = parameters[key];\r\n    });\r\n  }, [parameters]);\r\n\r\n  // same for notes\r\n  React.useEffect(() => {\r\n    ref.current.steps = stepSequencerDataToSteps(stepSequencersData);\r\n  }, [stepSequencersData]);\r\n\r\n  // the interval callback where all the interesting stuff take place\r\n  const playNote = React.useCallback(() => {\r\n    const { steps, noteIdx, tempoChangeRequested } = ref.current;\r\n\r\n    // pending temp change. set intervalMillis, reset tempoChangeRequested and restart interval\r\n    if (tempoChangeRequested) {\r\n      clearInterval(ref.current.intervalId);\r\n      ref.current.intervalMillis = tempoChangeRequested;\r\n      ref.current.tempoChangeRequested = null;\r\n      ref.current.intervalId = setInterval(playNote, tempoChangeRequested);\r\n    }\r\n\r\n    //const { note, on, velocity } = padData[noteIdx];\r\n    const stepData = steps[noteIdx];\r\n    setActiveNoteIdx(noteIdx);\r\n\r\n    ref.current.noteIdx++;\r\n    if (ref.current.noteIdx >= steps.length) ref.current.noteIdx = 0;\r\n\r\n    // pad is not on, no sound required\r\n    const { messages, messagesOffGroups } = stepData.reduce(\r\n      (obj, { channels, duration, note, on, velocity }) => {\r\n        if (on && velocity > 0)\r\n          channels.forEach(channel => {\r\n            obj.messages.push([\r\n              MidiMessages[`Channel${channel}NoteOn`],\r\n              note,\r\n              velocity,\r\n            ]);\r\n            if (!obj.messagesOffGroups[duration])\r\n              obj.messagesOffGroups[duration] = [];\r\n            obj.messagesOffGroups[duration].push([\r\n              MidiMessages[`Channel${channel}NoteOn`],\r\n              note,\r\n              0,\r\n            ]);\r\n          });\r\n\r\n        return obj;\r\n      },\r\n      { messages: [], messagesOffGroups: {} }\r\n    );\r\n\r\n    if (!messages.length) return;\r\n\r\n    messages.forEach(message => selectedOutput.send(message));\r\n    Object.keys(messagesOffGroups).forEach(duration => {\r\n      const messagesOff = messagesOffGroups[duration];\r\n      setTimeout(\r\n        () =>\r\n          messagesOff.forEach(messageOff => selectedOutput.send(messageOff)),\r\n        duration\r\n      );\r\n    });\r\n  }, [selectedOutput]);\r\n\r\n  // auto begin playing\r\n  React.useEffect(() => {\r\n    if (autostart && midiContext?.ready && midiContext.selectedOutput)\r\n      ref.current.intervalId = setInterval(playNote, intervalMillis);\r\n\r\n    return () => {\r\n      clearInterval(ref.current.intervalId);\r\n      ref.current.intervalId = null;\r\n    };\r\n  }, [autostart]);\r\n\r\n  // start/stop/seek to start button callbacks\r\n  const onSeekToStart = React.useCallback(() => {\r\n    setActiveNoteIdx(0);\r\n    ref.current.noteIdx = 0;\r\n  }, [setActiveNoteIdx]);\r\n\r\n  const onPlay = React.useCallback(() => {\r\n    if (ref.current.intervalId === null)\r\n      ref.current.intervalId = setInterval(\r\n        playNote,\r\n        ref.current.intervalMillis\r\n      );\r\n  }, [playNote]);\r\n\r\n  const onStop = React.useCallback(() => {\r\n    clearInterval(ref.current.intervalId);\r\n    ref.current.intervalId = null;\r\n  }, []);\r\n\r\n  return {\r\n    activeNoteIdx,\r\n    onPlay,\r\n    onSeekToStart,\r\n    onStop,\r\n  };\r\n};\r\n\r\nconst useParameters = (parametersArr, parameterValues = {}) => {\r\n  const [parameters, setParameters] = React.useState(\r\n    parametersArr.reduce((obj, parameterData) => {\r\n      obj[parameterData.name] =\r\n        parameterValues[parameterData.name] || parameterData.defaultValue;\r\n      return obj;\r\n    }, {})\r\n  );\r\n\r\n  const onSetParameter = React.useCallback(\r\n    (name, value) =>\r\n      setParameters(curr => ({\r\n        ...curr,\r\n        [name]: value,\r\n      })),\r\n    []\r\n  );\r\n\r\n  return {\r\n    onSetParameter,\r\n    parameters,\r\n  };\r\n};\r\n\r\nexport { useNotesPlaying, useParameters, usePadEvents };\r\n","// This icon file is generated automatically.\nvar StepBackwardOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"0 0 1024 1024\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M347.6 528.95l383.2 301.02c14.25 11.2 35.2 1.1 35.2-16.95V210.97c0-18.05-20.95-28.14-35.2-16.94L347.6 495.05a21.53 21.53 0 000 33.9M330 864h-64a8 8 0 01-8-8V168a8 8 0 018-8h64a8 8 0 018 8v688a8 8 0 01-8 8\" } }] }, \"name\": \"step-backward\", \"theme\": \"outlined\" };\nexport default StepBackwardOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport StepBackwardOutlinedSvg from \"@ant-design/icons-svg/es/asn/StepBackwardOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar StepBackwardOutlined = function StepBackwardOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: StepBackwardOutlinedSvg\n  }));\n};\n\nStepBackwardOutlined.displayName = 'StepBackwardOutlined';\nexport default /*#__PURE__*/React.forwardRef(StepBackwardOutlined);","// This icon file is generated automatically.\nvar CaretRightOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"0 0 1024 1024\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M715.8 493.5L335 165.1c-14.2-12.2-35-1.2-35 18.5v656.8c0 19.7 20.8 30.7 35 18.5l380.8-328.4c10.9-9.4 10.9-27.6 0-37z\" } }] }, \"name\": \"caret-right\", \"theme\": \"outlined\" };\nexport default CaretRightOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CaretRightOutlinedSvg from \"@ant-design/icons-svg/es/asn/CaretRightOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar CaretRightOutlined = function CaretRightOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CaretRightOutlinedSvg\n  }));\n};\n\nCaretRightOutlined.displayName = 'CaretRightOutlined';\nexport default /*#__PURE__*/React.forwardRef(CaretRightOutlined);","// This icon file is generated automatically.\nvar PauseOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M304 176h80v672h-80zm408 0h-64c-4.4 0-8 3.6-8 8v656c0 4.4 3.6 8 8 8h64c4.4 0 8-3.6 8-8V184c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"pause\", \"theme\": \"outlined\" };\nexport default PauseOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport PauseOutlinedSvg from \"@ant-design/icons-svg/es/asn/PauseOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar PauseOutlined = function PauseOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: PauseOutlinedSvg\n  }));\n};\n\nPauseOutlined.displayName = 'PauseOutlined';\nexport default /*#__PURE__*/React.forwardRef(PauseOutlined);","import React from 'react';\r\nimport { Card } from 'antd';\r\nimport { Button, Pad } from 'components/KeyboardComponents';\r\nimport ParameterKnob from './ParameterKnob';\r\nimport { sequencerParameterData } from './constants';\r\nimport { usePadEvents, useParameters, useNotesPlaying } from './utils';\r\nimport { noteToString } from 'lib/utils';\r\n\r\nconst parametersArr = Object.keys(sequencerParameterData).map(key => ({\r\n  ...sequencerParameterData[key],\r\n  name: key,\r\n}));\r\n\r\nconst StepSequencer = ({ activeNoteIdx, data, onSetData }) => {\r\n  const { noteDuration, transpose } = data;\r\n\r\n  const parameterValues = React.useMemo(\r\n    () => ({ noteDuration, transpose }),\r\n    [noteDuration, transpose]\r\n  );\r\n\r\n  const { parameters, onSetParameter } = useParameters(\r\n    parametersArr,\r\n    parameterValues\r\n  );\r\n\r\n  React.useEffect(\r\n    () => onSetData(d => ({ ...d, ...parameters })),\r\n    [parameters]\r\n  );\r\n\r\n  const padEvents = usePadEvents(onSetData);\r\n\r\n  return (\r\n    <div className=\"step-sequencer\">\r\n      <div className=\"controls\">\r\n        <Card bordered={false}>\r\n          {parametersArr.map(p => (\r\n            <ParameterKnob\r\n              {...p}\r\n              key={p.name}\r\n              onSetParameter={onSetParameter}\r\n              value={parameters[p.name]}\r\n            />\r\n          ))}\r\n        </Card>\r\n      </div>\r\n      <div className=\"pads-container\">\r\n        {Array.isArray(data?.notes) &&\r\n          data.notes.map(({ note, on }, idx) => (\r\n            <>\r\n              <Pad\r\n                active={activeNoteIdx === idx}\r\n                index={idx}\r\n                key={note}\r\n                on={on}\r\n                {...padEvents}\r\n              >\r\n                {noteToString(note)}\r\n              </Pad>\r\n              {(idx + 1) % 8 === 0 && <div className=\"flex-breaker\" />}\r\n            </>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StepSequencer;\r\n","import React from 'react';\r\nimport { Card } from 'antd';\r\nimport { Button, Pad } from 'components/KeyboardComponents';\r\nimport ParameterKnob from './ParameterKnob';\r\nimport { noteToMidi } from 'lib/utils';\r\nimport { defaultPattern, globalParameterData } from './constants';\r\nimport { useParameters, useNotesPlaying } from './utils';\r\nimport {\r\n  CaretRightOutlined,\r\n  PauseOutlined,\r\n  StepBackwardOutlined,\r\n} from '@ant-design/icons';\r\nimport StepSequencer from './StepSequencer';\r\n\r\nconst velocity = 50;\r\nconst channels = [1, 2, 3, 4];\r\n\r\nconst parametersArr = Object.keys(globalParameterData).map(key => ({\r\n  ...globalParameterData[key],\r\n  name: key,\r\n}));\r\n\r\nconst MidiSequencer = () => {\r\n  const [stepSequencersData, setStepSequencersData] = React.useState([\r\n    {\r\n      channels,\r\n      noteDuration: defaultPattern.noteDuration,\r\n      notes: defaultPattern.notes.map(note => ({\r\n        note,\r\n        on: true,\r\n      })),\r\n      transpose: 0,\r\n      velocity,\r\n    },\r\n  ]);\r\n\r\n  const [activeSequencerIdx, setActiveSequencerIdx] = React.useState(0);\r\n  const onSetStepSequencerData = React.useCallback(\r\n    data => {\r\n      const dataGetter = typeof data === 'function' ? data : () => data;\r\n      setStepSequencersData(sequencers =>\r\n        sequencers.map((currentData, idx) =>\r\n          idx === activeSequencerIdx ? dataGetter(currentData) : currentData\r\n        )\r\n      );\r\n    },\r\n    [setStepSequencersData, activeSequencerIdx]\r\n  );\r\n\r\n  const { parameters, onSetParameter } = useParameters(parametersArr);\r\n\r\n  const { activeNoteIdx, onSeekToStart, onPlay, onStop } = useNotesPlaying(\r\n    parameters,\r\n    stepSequencersData\r\n  );\r\n\r\n  return (\r\n    <div className=\"sequencer\">\r\n      <div className=\"global-controls\">\r\n        <Card bordered={false}>\r\n          <div className=\"control-row\">\r\n            <Button onClick={onSeekToStart}>\r\n              <StepBackwardOutlined />\r\n            </Button>\r\n            <Button onClick={onPlay}>\r\n              <CaretRightOutlined />\r\n            </Button>\r\n            <Button onClick={onStop}>\r\n              <PauseOutlined />\r\n            </Button>\r\n          </div>\r\n          <div className=\"control-row\">\r\n            {parametersArr.map(p => (\r\n              <ParameterKnob\r\n                {...p}\r\n                key={p.name}\r\n                onSetParameter={onSetParameter}\r\n                value={parameters[p.name]}\r\n              />\r\n            ))}\r\n          </div>\r\n        </Card>\r\n      </div>\r\n      <div className=\"step-sequencer\">\r\n        <StepSequencer\r\n          activeNoteIdx={activeNoteIdx}\r\n          data={stepSequencersData[activeSequencerIdx]}\r\n          onSetData={onSetStepSequencerData}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MidiSequencer;\r\n"],"names":["noteToString","number","octave","Math","floor","notes","note","noteToMidi","str","match","parseInt","n","toUpperCase","isNoteOn","midiMessage","noteOnStart","numOfChannels","isNoteOff","noteOffStart","pattern","children","className","onClick","index","props","active","on","onWheel","handleClick","React","e","handleWheel","deltaY","minAngle","centerBased","displayValue","max","min","onSetValue","step","style","title","value","ref","factor","resetFactor","debounce","current","angle","knobValue","maxAngle","convertToKnobAngle","newValue","transform","Array","from","numOfTicks","map","_","idx","tickIndex","tickAngle","key","getTickProps","name","onSetParameter","handleValueChange","createParameter","defaultValue","defaultPattern","bpm","noteDuration","noteValue","split","sequencerParameterData","transpose","globalParameterData","getIntervalMillis","stepSequencerDataToSteps","stepSequencersData","isArray","stepsLength","length","i","channels","velocity","duration","useParameters","parametersArr","parameterValues","reduce","obj","parameterData","parameters","setParameters","curr","StepBackwardOutlined","AntdIcon","_objectSpread","icon","StepBackwardOutlinedSvg","displayName","CaretRightOutlined","CaretRightOutlinedSvg","PauseOutlined","PauseOutlinedSvg","Object","keys","activeNoteIdx","data","onSetData","d","setPadData","padEvents","padIndex","item","direction","pd","bordered","p","setStepSequencersData","activeSequencerIdx","onSetStepSequencerData","dataGetter","sequencers","currentData","autostart","midiContext","MidiContext","selectedOutput","setActiveNoteIdx","intervalId","intervalMillis","noteIdx","steps","tempoChangeRequested","forEach","playNote","clearInterval","setInterval","stepData","channel","messages","push","MidiMessages","messagesOffGroups","message","send","messagesOff","setTimeout","messageOff","ready","onSeekToStart","onPlay","onStop","useNotesPlaying"],"sourceRoot":""}